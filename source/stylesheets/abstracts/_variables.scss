////
/// This file contains all application-wide Sass configuration variables
/// @group configurations
/// @todo Customize to match your design needs.
////

/// Title font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $title-font-stack: ComicSans, $basic-title-font-stack;
$title-font-stack: 'Miriam Libre', $basic-title-font-stack !default;


/// Text body font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $text-font-stack: ComicSans, $native-font-stack;
$text-font-stack: 'Miriam Libre', $native-font-stack !default;


/// Code (monospace) font stack
///
/// @access public
/// @type list
/// @todo Customize it to match your design needs or use one of the already available [font stacks](#font-stacks). Or do both.
///
/// @example scss
/// $code-font-stack: ComicSans, $basic-code-font-stack;
$code-font-stack: 'Miriam Libre', $basic-code-font-stack !default;


/// Font weights map
/// @access private
/// @prop {string} weight - Pure colors or a map of tones
/// @require {function} font-weight
/// @todo Customize the weights or add new ones to match your design needs.
/// @type Map
$font-weights: (
  'text': 400,
  'bold': 700,
  'heading': 700,
);


/// Body text font-size
///
/// @access public
/// @type number
$body-font-size: 1em !default;

/// Default Leading
///
/// @access public
/// @type number
$leading: 1.5 !default;

/// flexible line heights map
/// @access private
/// @type Map
/// @prop {number} min - minimum line height expressed unitless
/// @prop {number} max - maximum line height expressed unitless
$leadings: (
  'min': 1.15,
  'max': 1.5,
) !default;


/// flexible line length map
///
/// @type Map
/// @prop {number} min - minimum line length expressed in `em`
/// @prop {number} max - maximum line length expressed in `em`
$line-lengths: (
  'min': 21em,
  'max': 35em,
) !default;

///
/// @link http://www.modularscale.com/?1&rem&1.25
$modularscale: (
  base: 1rem,
  ratio: 1.25
);

/// List all available colors and tones.
///
/// @access private
/// @prop {string} color - Pure colors or a map of tones
/// @prop {color | map} color.tone - Pure colors or returned color value of functions
/// @require {function} palette
/// @todo Customize the colors or add new ones to match your design needs.

$green--x-light: rgb(53, 211, 79);
$green--light: rgb(8, 180, 146);
$green: rgb(51, 153, 153);
$green--dark: rgb(29, 122, 139);
$green--x-dark: rgb(30, 91, 102);
$gray--x-light: rgb(245, 245, 245);
$gray--light: rgb(136, 136, 136);
$gray: rgb(186, 186, 186);
$gray--dark: rgb(228, 228, 228);
$gray--x-dark: rgb(75, 75, 75);
$lightest: rgb(245, 245, 245);
$darkest: rgb(75, 75, 75);
$petrol: rgb(45, 71, 93);
$petrol--dark: rgb(35, 61, 84);
$palette: (
  'gray': (
    'x-light': $gray--x-light,
    'light': $gray--light,
    'base': $gray,
    'dark': $gray--dark,
    'x-dark': $gray--x-dark,
  ),
  'white': rgb(255, 255, 255),
  'black': rgb(0, 0, 0),
  'green': (
    'x-light': $green--x-light,
    'light': $green--light,
    'base': $green,
    'dark': $green--dark,
    'x-dark': $green--x-dark,
  ),
  'petrol': (
    'base': $petrol,
    'dark': $petrol--dark,
  ),
  'shadow': (
    'base': rgba(86, 121, 192, 0.3),
    'reverse': transparentize($lightest, 0.75),
  ),
  'debug': rgb(255, 0, 0),
  'anchor': (
    'base': rgb(0, 102, 204),
    'link': rgb(0, 102, 204),
    'visited': rgb(128, 0, 128),
    'hover': rgb(50, 152, 255),
    'focus': rgb(50, 152, 255),
    'active': rgb(229, 0, 80),
  ),
  'border': (
    'base': rgb(192, 192, 192),
    'focus': rgb(0, 0 , 0),
    ),
  'button': (
    'base': rgb(225, 225, 225),
    'focus': rgb(229, 241, 251),
    'slider': hsl(0, 0%, 40%),
    'submit': rgb(217, 83, 79),
    'reset': transparent,
  ),
  'disabled': (
    'foreground': hsl(0, 0%, 42%),
    'background': hsl(0, 0%, 94%),
  ),
  'loading': (
    'foreground': hsl(0, 0%, 94%),
    'background': hsla(0, 0%, 7%, 0.8),
  ),
  'label': (
    'default': rgb(119, 119, 119),
    'primary': rgb(51, 122, 183),
    'success': rgb(66, 133, 66),
    'info': rgb(60, 127, 145),
    'warning': rgb(240, 173, 78),
    'danger': rgb(217, 83, 79),
  ),
  'mark': (
    'foreground': rgb(51, 51, 51),
    'background': rgb(215, 255, 90),
  ),
  'placeholder': (
    'base': hsl(0, 0%, 34%),
    'focus': hsl(0, 0%, 56%),
  ),
  'quotes': hsl(0, 0%, 34%),
  'selection': (
    'foreground': rgb(255, 255, 255),
    'background': rgb(20, 105, 140),
  ),
  'tap-highlight': rgb(255, 94, 153),
  'target-highlight': rgb(255, 255, 102),
  'text': (
    'light': $lightest,
    'dark': $darkest,
  ),
);

/// Gradient steps
/// @type list
$gradient-steps: rgb(104, 138, 58),
rgb(122, 157, 66),
rgb(141, 178, 76),
rgb(156, 193, 84),
rgb(170, 202, 107),
rgb(185, 212, 133),
rgb(80, 124, 58),
rgb(84, 149, 164),
rgb(104, 159, 78),
rgb(115, 173, 87),
rgb(132, 185, 111),
rgb(152, 198, 135),
rgb(59, 104, 93),
rgb(77, 136, 123),
rgb(84, 149, 135),
rgb(98, 164, 152),
rgb(119, 180, 170),
rgb(74, 130, 142),
rgb(84, 149, 164),
rgb(96, 170, 191),
rgb(106, 187, 210),
rgb(116, 197, 216),
rgb(132, 208, 224);

/// Default border-radius
/// @todo Customize it to match your design.
/// @type number
$rounded-corner: 5px !default;

/// border default width
/// @todo Customize it to match your design.
/// @type number
$stroke: 1px !default;

/// gutter default width
/// @todo Customize it to match your design.
/// @type number
$gutter: $leading * $body-font-size / 1em * 1rem;

@function _im-to-em($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name, $value in $breakpoints {
    $em-value: ($value / $base-value) * 1em;
    $new-breakpoints: map-merge($new-breakpoints, ($name: $em-value));
  }

  @return $new-breakpoints;
}

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: _im-to-em(
  (
    '2col': 320px,
    '3col': 480px,
    '4col': 640px,
    '5col': 800px,
    '6col': 960px,
    '7col': 1120px,
    '8col': 1280px,
    '9col': 1440px,
    '10col': 1600px,
    '11col': 1760px,
    '12col': 1920px,
    '13col': 2080px,
    '14col': 2240px,
    '15col': 2400px,
  )
) !default;
$toggle-breakpoints: (
  'toggle-table-layout': 48em,
  'toggle-menu': 64em,
);
$breakpoints: map-merge($breakpoints, $toggle-breakpoints);



/// Container's maximum width
/// @type number
$max-width: 73.75em !default; // 1180px


/// Z-indexes map, gathering all Z layers of the application. Avoid to edit it.
/// @access public
/// @type Map
$layers: (
  'modal': 5000,
  'dropdown': 4000,
  'default': 1,
  'below': -1,
);




/// Relative or absolute URL where all assets are served from.
/// @todo Customize it to match your setup.
/// @type String
/// @example scss - When using a CDN
///   $base-url: 'http://cdn.example.com/assets/';
$base-url: '/assets/' !default;

@function _im-to-px($breakpoints, $base-value: 16px) {
  $new-breakpoints: ();

  @each $name, $value in $breakpoints {
    $px-value: if(unit($value) == 'em', $value / 1em * $base-value, $value);
    $new-breakpoints: map-merge($new-breakpoints, ($name: $px-value));

    @if (unit($value) != 'em' and unit($value) != 'px') {
      @error 'all media queries units should be either `em` or `px`. `#{unit($value)}` given.';
    } @else {
      $px-value: if(unit($value) == 'em', $value / 1em * $base-value, $value);
      $new-breakpoints: map-merge($new-breakpoints, ($name: $px-value));
    }
  }

  @return $new-breakpoints;
}

@if variable-exists('im-media-support') and $im-media-support == false {
  $breakpoints: _im-to-px($breakpoints);
  $max-width: $max-width / 1em * 16px;
}
